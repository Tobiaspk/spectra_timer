Arguments:
  -  epochs 100
  -  use_cell_types False
Loading data...
Running Spectra...
Training model...
Wrote profile results to run_model.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: /Users/krauset/projects/tools/spectra/spectra/spectra.py
Function: loss at line 247

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   247                                               @profile
   248                                               def loss(self, X, labels): 
   249                                                   assert(self.use_cell_types) #if this is False, fail because model has not been initialized to use cell types
   250                                                   
   251                                                   #convert inputs to torch.Tensors
   252                                                   X = torch.Tensor(X)
   253                                                   #labels = torch.Tensor(labels)
   254                                           
   255                                                   #initialize loss and fetch global parameters
   256                                                   loss = 0.0
   257                                                   theta_global = torch.softmax(self.theta["global"], dim = 1)
   258                                                   eta_global = (self.eta["global"]).exp()/(1.0 + (self.eta["global"]).exp())
   259                                                   eta_global = 0.5*(eta_global + eta_global.T)
   260                                                   gene_scaling_global = self.gene_scaling["global"].exp()/(1.0 + self.gene_scaling["global"].exp())
   261                                                   kappa_global = self.kappa["global"].exp()/(1 + self.kappa["global"].exp())
   262                                                   rho_global = self.rho["global"].exp()/(1 + self.rho["global"].exp())
   263                                           
   264                                                   #loop through cell types and evaluate loss at every cell type
   265                                                   for cell_type in self.cell_types:
   266                                                       kappa = self.kappa[cell_type].exp()/(1 + self.kappa[cell_type].exp())
   267                                                       rho = self.rho[cell_type].exp()/(1 + self.rho[cell_type].exp())
   268                                                       gene_scaling_ct = self.gene_scaling[cell_type].exp()/(1.0 + self.gene_scaling[cell_type].exp())
   269                                                       X_c = X[labels == cell_type]
   270                                                       adj_matrix = self.adj_matrix[cell_type] 
   271                                                       weights = self.weights[cell_type]
   272                                                       adj_matrix_1m = self.adj_matrix_1m[cell_type]
   273                                                       theta_ct = torch.softmax(self.theta[cell_type], dim = 1)
   274                                                       eta_ct = (self.eta[cell_type]).exp()/(1.0 + (self.eta[cell_type]).exp())
   275                                                       eta_ct = 0.5*(eta_ct + eta_ct.T)
   276                                                       theta_global_ = contract('jk,j->jk',theta_global, gene_scaling_global + self.delta)
   277                                                       theta_ct_ = contract('jk,j->jk',theta_ct, gene_scaling_ct + self.delta)
   278                                                       theta = torch.cat((theta_global_, theta_ct_),1)
   279                                                       alpha = torch.exp(self.alpha[cell_type])
   280                                                       recon = contract('ik,jk->ij', alpha, theta) 
   281                                                       term1 = -1.0*(torch.xlogy(X_c,recon) - recon).sum()
   282                                                       if len(adj_matrix) > 0:
   283                                                           mat = contract('il,lj,kj->ik',theta_ct,eta_ct,theta_ct) 
   284                                                           term2 = -1.0*(torch.xlogy(adj_matrix*weights, (1.0 - rho)*(1.0 -kappa)*mat + (1.0 - rho)*kappa)).sum()
   285                                                           term3 = -1.0*(torch.xlogy(adj_matrix_1m,(1.0 -kappa)*(1.0 - rho)*(1.0 - mat) + rho)).sum()
   286                                                       else:
   287                                                           term2 = 0.0
   288                                                           term3 = 0.0
   289                                                       #the magnitude of lambda is proportional to the number of cells [todo: simpler to just take the mean instead of sum in term 1]
   290                                                       loss = loss + self.lam*term1 +(self.cell_type_counts[cell_type]/float(self.n))*(term2 + term3) 
   291                                                       
   292                                           
   293                                                   #compute loss associated with global graph
   294                                                   adj_matrix = self.adj_matrix["global"] 
   295                                                   adj_matrix_1m = self.adj_matrix_1m["global"]
   296                                                   weights = self.weights["global"]
   297                                                   if len(adj_matrix) > 0:
   298                                                       mat = contract('il,lj,kj->ik',theta_global,eta_global,theta_global) 
   299                                                       term2 = -1.0*(torch.xlogy(adj_matrix*weights, (1.0 - rho_global)*(1.0 -kappa_global)*mat + (1.0 - rho_global)*kappa_global)).sum()
   300                                                       term3 = -1.0*(torch.xlogy(adj_matrix_1m, (1.0 -kappa_global)*(1.0 - rho_global)*(1.0 - mat) + rho_global)).sum()
   301                                                       loss = loss + term2 + term3 
   302                                                   return loss

Total time: 63.9114 s
File: /Users/krauset/projects/tools/spectra/spectra/spectra.py
Function: loss_no_cell_types at line 304

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   304                                               @profile
   305                                               def loss_no_cell_types(self, X):
   306       100         67.0      0.7      0.0          assert(self.use_cell_types == False) #if this is True, just fail 
   307       100       1779.0     17.8      0.0          X = torch.Tensor(X)
   308                                           
   309       100     106635.0   1066.3      0.2          theta = torch.softmax(self.theta, dim = 1)
   310       100      20738.0    207.4      0.0          eta = self.eta.exp()/(1.0 + (self.eta).exp())
   311       100      10642.0    106.4      0.0          eta = 0.5*(eta + eta.T)
   312       100       9317.0     93.2      0.0          gene_scaling = self.gene_scaling.exp()/(1.0 + self.gene_scaling.exp())
   313       100       1140.0     11.4      0.0          kappa = self.kappa.exp()/(1 + self.kappa.exp())
   314       100        764.0      7.6      0.0          rho = self.rho.exp()/(1 + self.rho.exp())
   315       100     132070.0   1320.7      0.2          alpha = torch.exp(self.alpha)
   316       100        123.0      1.2      0.0          adj_matrix = self.adj_matrix
   317       100         62.0      0.6      0.0          weights = self.weights
   318       100        122.0      1.2      0.0          adj_matrix_1m = self.adj_matrix_1m
   319       100      41538.0    415.4      0.1          theta_ = contract('jk,j->jk',theta, gene_scaling + self.delta)
   320       100    4623334.0  46233.3      7.2          recon = contract('ik,jk->ij', alpha, theta_) 
   321       100    6424540.0  64245.4     10.1          term1_a = torch.xlogy(X,recon)
   322       100    5890285.0  58902.8      9.2          term1_b = term1_a - recon
   323       100     509483.0   5094.8      0.8          term1 = -1.0*(term1_b).sum()
   324                                           
   325       100       1516.0     15.2      0.0          if len(adj_matrix) > 0:
   326       100    3965053.0  39650.5      6.2                  mat = contract('il,lj,kj->ik',theta,eta,theta)
   327       100      94426.0    944.3      0.1                  mat_a = contract('il,lj->ij',theta,eta)
   328       100    3146529.0  31465.3      4.9                  mat_b = contract('ij,kj->ik',mat_a,theta)
   329       100   23286992.0 232869.9     36.4                  assert torch.allclose(mat, mat_b)
   330                                           
   331       100    6366191.0  63661.9     10.0                  term2 = -1.0*(torch.xlogy(adj_matrix*weights, (1.0 - rho)*(1.0 -kappa)*mat + (1.0 - rho)*kappa)).sum()
   332       100    5321815.0  53218.2      8.3                  term3_a = (1.0 -kappa)*(1.0 - rho)*(1.0 - mat) + rho
   333       100    3538167.0  35381.7      5.5                  term3_b = torch.xlogy(adj_matrix_1m, term3_a)
   334       100     416309.0   4163.1      0.7                  term3 = -1.0*(term3_b).sum()
   335                                                   else:
   336                                                       term2 = 0.0
   337                                                       term3 = 0.0
   338                                           
   339       100       1734.0     17.3      0.0          return self.lam*term1 + term2 + term3    

Total time: 0.734596 s
File: /Users/krauset/projects/tools/spectra/spectra/spectra.py
Function: __init__ at line 531

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   531                                               @profile
   532                                               def __init__(self,X, labels,  L, vocab = None, gs_dict = None, use_weights = False, adj_matrix = None, weights = None, lam = 0.1, delta=0.1,kappa = None, rho = None, use_cell_types = True):
   533         1          1.0      1.0      0.0          self.L = L
   534         1          1.0      1.0      0.0          self.lam = lam 
   535         1          1.0      1.0      0.0          self.delta = delta 
   536         1          1.0      1.0      0.0          self.kappa = kappa 
   537         1          1.0      1.0      0.0          self.rho = rho 
   538         1          2.0      2.0      0.0          self.use_cell_types = use_cell_types
   539                                           
   540                                                   # if gs_dict is provided instead of adj_matrix, convert to adj_matrix, overrides adj_matrix and weights
   541         1          1.0      1.0      0.0          if gs_dict is not None:
   542         1       1223.0   1223.0      0.2              gene2id = dict((v, idx) for idx, v in enumerate(vocab))
   543                                                       
   544         1          0.0      0.0      0.0              if use_cell_types:
   545                                                           adj_matrix, weights = spectra_util.process_gene_sets(gs_dict = gs_dict, gene2id = gene2id, weighted = use_weights)
   546                                                       else:
   547         1     276224.0 276224.0     37.6                  adj_matrix, weights = spectra_util.process_gene_sets_no_celltypes(gs_dict = gs_dict, gene2id = gene2id, weighted = use_weights)
   548                                           
   549                                           
   550         1     457123.0 457123.0     62.2          self.internal_model = SPECTRA(X = X, labels = labels, adj_matrix = adj_matrix, L = L, weights = weights, lam = lam, delta=delta,kappa = kappa, rho = rho, use_cell_types = use_cell_types)
   551                                           
   552         1          0.0      0.0      0.0          self.cell_scores = None
   553         1         11.0     11.0      0.0          self.factors = None
   554         1          1.0      1.0      0.0          self.B_diag = None
   555         1          1.0      1.0      0.0          self.eta_matrices = None 
   556         1          4.0      4.0      0.0          self.gene_scalings = None 
   557         1          0.0      0.0      0.0          self.rho = None 
   558         1          1.0      1.0      0.0          self.kappa = None 

Total time: 104.941 s
File: /Users/krauset/projects/tools/spectra/spectra/spectra.py
Function: train at line 560

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   560                                               @profile
   561                                               def train(self,X, labels = None, lr_schedule = [1.0,.5,.1,.01,.001,.0001],num_epochs = 10000, verbose = False): 
   562         1         97.0     97.0      0.0          opt = torch.optim.Adam(self.internal_model.parameters(), lr=lr_schedule[0])
   563         1          0.0      0.0      0.0          counter = 0
   564         1          1.0      1.0      0.0          last = np.inf
   565                                           
   566       100      25492.0    254.9      0.0          for i in tqdm(range(num_epochs)):
   567                                                       #print(counter)
   568       100      32392.0    323.9      0.0              opt.zero_grad()
   569       100        157.0      1.6      0.0              if self.internal_model.use_cell_types:
   570                                                           assert(len(labels) == X.shape[0])
   571                                                           loss = self.internal_model.loss(X, labels)
   572       100         32.0      0.3      0.0              elif self.internal_model.use_cell_types == False:
   573       100   64930102.0 649301.0     61.9                  loss = self.internal_model.loss_no_cell_types(X)
   574                                           
   575       100   39469555.0 394695.5     37.6              loss.backward()
   576       100     474845.0   4748.4      0.5              opt.step()
   577                                                   
   578        98        157.0      1.6      0.0              if loss.item() >= last:
   579         2          2.0      1.0      0.0                  counter += 1
   580         2         18.0      9.0      0.0                  if int(counter/3) >= len(lr_schedule):
   581                                                               break
   582         2          0.0      0.0      0.0                  if counter % 3 == 0:
   583                                                               opt = torch.optim.Adam(self.internal_model.parameters(), lr=lr_schedule[int(counter/3)])
   584                                                               if verbose:
   585                                                                   print("UPDATING LR TO " + str(lr_schedule[int(counter/3)]))
   586       100         50.0      0.5      0.0              last = loss.item() 
   587                                           
   588                                           
   589                                                   #add all model parameters as attributes 
   590                                           
   591         1          0.0      0.0      0.0          if self.use_cell_types:
   592                                                       self.__store_parameters(labels)
   593                                                   else:
   594         1       7819.0   7819.0      0.0              self.__store_parameters_no_celltypes()

